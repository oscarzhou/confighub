# Check the rollout effect: kubectl rollout status deployment/nginx-deployment 
# check the ReplicaSet: kubectl get rs
# check the rollout history: kubectl rollout history deployment/nginx-deployment
# annotating a rollout history record: kubectl annotate deployment/nginx-deployment kubernetes.io/change-cause="image updated to 1.16.1"
# check the rollout history on a specific version: kubectl rollout history deployment/nginx-deployment --revision=2
# rollback: kubectl rollout undo deployment/nginx-deployment
# rollback to a specific version: kubectl rollout undo deployment/nginx-deployment --to-revision=2
# scale a deployment: kubectl scale deployment/nginx-deployment --replicas=10
# autoscaling based on the cpu utilization: kubectl autoscale deployment/nginx-deployment --min=10 --max=15 --cpu-percent=80
# list deployment (short command): kubectl get deploy
# pause a rollout: kubectl rollout pause deployment/nginx-deployment (ref@https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#pausing-and-resuming-a-deployment)
# update the resource: kubectl set resources deployment/nginx-deployment -c=nginx --limits=cpu=200m,memory=512Mi
# resume a rollout: kubectl rollout resume deployment/nginx-deployment
# watch the rollout status: kubectl get rs --watch

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.14.2
        ports:
        - containerPort: 80
